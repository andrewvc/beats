// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
